# nginx worker进程启动的用户，不建议启动默认nobody用户
user nginx;
# 根据cpu核心数启动worker进程
worker_processes auto; 
# 绑定worker进程到不同的cpu上,如8核
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
# 每个worker进程打开的最大文件数，受系统限制，不得超过ulimit -HSn限制值
worker_rlimit_nofile 65535;
events {
    # 使用epoll的I/O多路复用模型,高性能高并发设置
    use epoll;
    # 每个worker单个进程允许客户端的最大连接数
    worker_connections 10240;
}

http {
    # nginx支持的媒体类型
    include mime.types; 
    # 默认的媒体类型
    default_type application/octet-stream;
    # 开启高速传输模式
    sendfile on;
    # 减少网络报文段的数量
    tcp_nopush on;
    # 提高I/O性能，等待字节组成一个数据包，对于业务较少，数据及时性高的要关闭
    tcp_nodelay on;
    # 读取客户端请求头部数据的超时时间，防止客户端采用http进行超大头部攻击
    client_header_timeout 15;
    # 读取客户端请求主题的超时时间，为连续两个成功读取操作之间的一个超时，默认60
    client_body_timeout 25;
    # 响应客户端的超时时间，为两个连接之间的时间，超过时间，客户端无活动就关闭连接,默认60
    send_timeout 25;
    # 连接超时
    keepalive_timeout 65;
    # 统一日志格式
     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    # 隐藏软件版本
    server_tokens off;
    # 开启压缩
    gzip on;
    # 允许压缩的页面最小字节数
    gzip_min_length 1k;
    # 压缩比 1-9
    gzip_http_level 9;
    # 压缩指定类型
    gzip_types text/plain application/x-javascript application/javascript  text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    # 压缩缓冲区大小，4个16k的内存作为压缩结果流缓冲
    gzip_buffers  4 16k;
    # 让缓存服务器缓存经过压缩的页面
    gzip_vary on;

    access_log logs/access.log main;

    include vhosts/*.conf;
}